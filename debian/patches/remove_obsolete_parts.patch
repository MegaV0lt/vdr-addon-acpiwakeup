--- a/S90.acpiwakeup
+++ b/S90.acpiwakeup
@@ -1,25 +1,20 @@
-#!/bin/sh
+#!/bin/bash
 #
 # VDR shutdown hook for ACPI - Tobias Grimm <vdr@e-tobi.net>
+# modified by Alexander Grothe <seahawk1986@gmx.de>
 # --------------------------
 #
 # This shutdown hook sets the wakeup time for the next timer using
 # ACPI.
 #
 
-if [ "`basename $0`" != "testwakeup" ] ; then
+if [ "$(basename "$0")" != "testwakeup" ] ; then
     # read arguments for acpi-wakeup from conf-file
     . /etc/vdr/vdr-addon-acpiwakeup.conf
     WAKEUP_FILE="/var/cache/vdr/acpiwakeup.time"
 
-    # take care of UTC setting
-    if [ -f /etc/default/rcS ]; then
-        UTC=$(egrep "^[^#]*UTC=" /etc/default/rcS | tail -n1 | cut -d= -f2)
-    fi
-
     LOG="logger -t vdr-addon-acpiwakeup "
 else
-    UTC=$UTC
     WAKEUP_FILE=$WAKEUP_FILE
     LOG="nop"
 fi
@@ -30,81 +25,65 @@
     echo -n ""
 }
 
-if [ "$UTC" = "yes" ]; then
-    TIME_FUNCTION="gmtime"
-else
-    TIME_FUNCTION="localtime"
-fi
-
 # Defaults:
 [ -z "$ACPI_ENABLED" ]       && export ACPI_ENABLED="yes"
 [ -z "$ACPI_REGULAR_DAYS" ]  && export ACPI_REGULAR_DAYS="0"
 [ -z "$ACPI_REGULAR_TIME" ]  && export ACPI_REGULAR_TIME="00:00"
 [ -z "$ACPI_START_AHEAD" ]   && export ACPI_START_AHEAD="5"
-
-[ -z "$ACPI_ALARM" ]         && export ACPI_ALARM="/proc/acpi/alarm"
 [ -z "$WAKEALARM" ]          && export WAKEALARM="/sys/class/rtc/rtc0/wakealarm"
 
 TIMER=$1
 
-TimeToString()
-{
-    echo $(perl -e "(\$s,\$mi,\$h,\$d,\$mo,\$y,\$t,\$t,\$t)=\
-    $TIME_FUNCTION($1); printf(\"%04d-%02d-%02d %02d:%02d:%02d\",\
-    \$y+1900,\$mo+1,\$d,\$h,\$mi,\$s);")
-}
-
 AcpiError()
 {
-    $LOG "No writeable $ACPI_ALARM or $WAKEALARM found. ACPI needed!!!"
-    echo "ABORT_MESSAGE=\"ACPI not installed, shutdown aborted!\""
+    $LOG "No writeable $WAKEALARM found. RTC needed!!!"
+    echo "ABORT_MESSAGE=\"RTC not writable, shutdown aborted!\""
     exit 1
 }
 
-ResetWakeupTimeKernelLte2_6_22()
-{
-    # I don't really now right now, how to disable
-    # the wakeup, so just set it to 00:00:01 !!!!
-    SetWakeupTimeKernelLte2_6_22 \
-      "`date -d '00:00:01' +'%s' | sed 's/_/ /'`"
-    return $?
-}
-
-SetWakeupTimeKernelLte2_6_22()
-{
-    # convert time_t to YYYY-MM-DD HH:MM:SS
-    TIME_TO_SET=`TimeToString $1`
-
-    if [ -w $ACPI_ALARM ]; then
-        $LOG "Writing to  $ACPI_ALARM"
-        echo "$TIME_TO_SET" >$ACPI_ALARM
-        # Set it once more - some boards require this!
-        echo "$TIME_TO_SET" >$ACPI_ALARM
-        return $?
-    else
-        return 1
-    fi
-}
 
-ResetWakeupTimeKernelGte2_6_23()
+ResetWakeupTime_RTC()
 {
     if [ -w $WAKEALARM ]; then
-        $LOG "Writing to $WAKEALARM"
-        echo 0 >$WAKEALARM
-        return $?
+        $LOG "Writing 0 to $WAKEALARM"
+        echo 0 > $WAKEALARM &&
+        return 0
     else
-        return 1
+        $LOG "WAKEALARM $WAKEALARM not writable"
     fi
+    return 1
 }
 
-SetWakeupTimeKernelGte2_6_23()
-{
-    if [ -w $WAKEALARM ]; then
-        if ResetWakeupTimeKernelGte2_6_23 ; then
-            $LOG "Writing to $WAKEALARM"
-            echo "$1" >$WAKEALARM
-            return $?
-        fi
+get_utc_offset() {
+    # if the RTC runs in local time return an UTC offset for the timestamp
+    # given as the first argument
+    local -i utc_offset=0
+    # /etc/ajdtime is created by executing "timedatectl set-local-rtc 1"
+    # please note that this is generally considered a bad idea...
+    if grep -q LOCAL /etc/adjtime >/dev/null 2>&1
+    then
+	local utc_offset_raw
+	utc_offset_raw="$(date -d@"$1" +%z)"
+	# date returns something like "+0100" for an offset of one hour
+	# we need to extract the hours and minutes ...
+	local offset_hours=${utc_offset_raw:1:2}
+	local offset_minutes=${utc_offset_raw:3:4}
+        # ... and convert them into total seconds
+	utc_offset="((offset_hours * 60) + offset_minutes) * 60"
+    fi
+    echo "$utc_offset"
+}
+
+SetWakeupTime_RTC() {
+    local -i ts="$1"
+    local -i UTC_OFFSET
+    UTC_OFFSET=$(get_utc_offset "$ts")
+    [ "$UTC_OFFSET" -gt 0 ] && "LOG" "SetWakeupTime_RTC: RTC is not set to UTC, required UTC_OFFSET is $UTC_OFFSET seconds"
+    ts=$(( ts + UTC_OFFSET ))
+
+    if [ -w $WAKEALARM ] && ResetWakeupTime; then
+            $LOG "Writing $ts to $WAKEALARM"
+            echo "$ts" > $WAKEALARM 2>/dev/null && return 0
     fi
     return 1
 }
@@ -113,27 +92,44 @@
 ResetWakeupTime()
 {
     $LOG "Resetting ACPI alarm time"
-    ResetWakeupTimeKernelLte2_6_22 || \
-    ResetWakeupTimeKernelGte2_6_23 || \
+    ResetWakeupTime_RTC || \
     AcpiError
 }
 
 SetWakeupTime()
 {
-    $LOG "Setting ACPI alarm time to: `TimeToString $1`"
-    SetWakeupTimeKernelLte2_6_22 "$1" || \
-    SetWakeupTimeKernelGte2_6_23 "$1" || \
-    AcpiError
-
-    # remember wakeup time for stop script
-    echo `TimeToString $1` >$WAKEUP_FILE
+    $LOG "Try setting ACPI alarm time to: $(date -d@"$1") ($1)"
+    if SetWakeupTime_RTC "$1"
+    then
+        echo "$1" >"$WAKEUP_FILE"
+    else
+        # If the RTC did not accept the date, it might be to far in the future
+        # see https://github.com/torvalds/linux/commit/6a6af3d04435adfdaab363624ec569a9b5d3973c
+        # so we need to try waking up in less than a year, less than a month or less than a day
+        dates=("now +1 year -1 min" "now +1 month -1 min" "now +1 week -1 min" "now +1 day -1 min")
+        for d in "${dates[@]}"
+        do
+	    new_date=$(date -d "$d" +%s)
+            [ "$1" -lt "$new_date" ] && continue
+	    $LOG "RTC did not accept $1, try setting ACPI alarm time to: $(date -d@"$new_date") ($new_date)"
+            if SetWakeupTime_RTC "$new_date"
+            then
+                # remember wakeup time for stop script
+                echo "$new_date" >"$WAKEUP_FILE"
+                return 0
+            fi
+        done
+	AcpiError
+    fi
 }
 
 IsRegularDayOfWeek()
 {
     local day
-    for day in $ACPI_REGULAR_DAYS ; do
-        if [ "$day" = "`date -d \"@$1\" +%u`" ] ; then
+    for day in $ACPI_REGULAR_DAYS
+    do
+        if [ "$day" = "$(date -d "@$1" +%u)" ]
+        then
             return 0
         fi
     done
@@ -144,19 +140,19 @@
     # check if we should wake up before the next timer:
     if [ "$ACPI_REGULAR_DAYS" != "0" ]; then
         REGULAR_TIMER=$(date -d "$ACPI_REGULAR_TIME" +%s)
-        if [ $REGULAR_TIMER -lt $(date +%s) ] ; then
-            REGULAR_TIMER=$(($REGULAR_TIMER + 24 * 60 * 60))
+        if [ "$REGULAR_TIMER" -lt "$(date +%s)" ] ; then
+            REGULAR_TIMER=$(( REGULAR_TIMER + 24 * 60 * 60))
         fi
         while ! IsRegularDayOfWeek $REGULAR_TIMER ; do
-            REGULAR_TIMER=$(($REGULAR_TIMER + 24 * 60 * 60))
+            REGULAR_TIMER=$(( REGULAR_TIMER + 24 * 60 * 60))
         done
 
-        if [ $TIMER -eq 0 ] || [ $TIMER -gt 0 -a $REGULAR_TIMER -lt $TIMER ] ; then
+        if [ "$TIMER" -eq 0 ] || [ "$TIMER" -gt 0 -a "$REGULAR_TIMER" -lt "$TIMER" ] ; then
             TIMER=$REGULAR_TIMER
         fi
     fi
     if [ $TIMER -gt 0 ]; then
-        MIN_START_AHEAD=$((`date +%s` + 60 * $ACPI_START_AHEAD))
+        MIN_START_AHEAD=$(($(date +%s) + (60 * ACPI_START_AHEAD) ))
         if [ $MIN_START_AHEAD -gt $TIMER ]; then
             $LOG "Can not set wakeup time less than $ACPI_START_AHEAD minutes ahead."
             echo "ABORT_MESSAGE=\"Wakeup in less than $ACPI_START_AHEAD minutes, aborting!\""
@@ -164,7 +160,7 @@
         fi
 
         # adjust wakeup time by ACPI_START_AHEAD
-        TIMER=$(($TIMER - 60 * $ACPI_START_AHEAD))
+    TIMER=$(( TIMER - (60 * ACPI_START_AHEAD) ))
     fi
 
     if [ $TIMER -eq 0 ]; then
--- a/tests/runtests
+++ b/tests/runtests
@@ -1,5 +1,4 @@
-#!/bin/sh
-
+#!/bin/bash
 . ./shellunit.sh
 . ./testhelpers.sh
 
@@ -18,7 +17,7 @@
 }
 
 export ACPI_ENABLED=yes
-export ACPI_ALARM=./alarm
+export WAKEALARM=./alarm
 export WAKEUP_FILE=./wakeup
 export FAKEDATETIME="2008-01-01 00:00:00"
 export TZ="Europe/Berlin"
@@ -27,30 +26,27 @@
 
 start_test "Should not do anything when disabled"
     ACPI_ENABLED=no \
-      sh ./testwakeup `wakeuptime '2008-05-11 20:00:00'`
-    expect_wakeup_time ""
+      bash ./testwakeup `wakeuptime '2008-05-11 20:00:00'`
+    alarm=`cat ./alarm`
+    assert_equals "" "$alarm"
 end_test
 
 start_test "Should disable wakeup when no timer is set"
-    FAKEDATETIME="2008-01-01 01:00:00"
-    sh ./testwakeup `wakeuptime '@0'`
-    expect_wakeup_time "2008-01-01 00:00:01"
+    bash ./testwakeup `wakeuptime '@0'`
+    alarm=`cat ./alarm`
+    assert_equals "$alarm" "0"
 end_test
 
 start_test "Should wake up ACPI_START_AHEAD minutes ahead"
-    sh ./testwakeup `wakeuptime '2008-05-11 20:00:00'`
+    ACPI_START_HEAD=8 \
+      bash ./testwakeup `wakeuptime '2008-05-11 20:00:00'`
     expect_wakeup_time "2008-05-11 19:55:00"
 end_test
 
-start_test "Should set the time as UTC when system uses UTC"
-    UTC=yes sh ./testwakeup `wakeuptime '2008-06-11 20:00:00'`
-    expect_wakeup_time "2008-06-11 17:55:00"
-end_test
-
 start_test "Should wake up daily at 03:00 today"
     ACPI_REGULAR_DAYS="1 2 3 4 5 6 7" \
     ACPI_REGULAR_TIME="03:00" \
-      sh ./testwakeup `wakeuptime '2008-05-12 20:00:00'`
+      bash ./testwakeup `wakeuptime '2008-05-12 20:00:00'`
     expect_wakeup_time "2008-01-01 02:55:00"
 end_test
 
@@ -58,7 +54,7 @@
     FAKEDATETIME="2008-01-01 02:00:00" \
     ACPI_REGULAR_DAYS="1 2 3 4 5 6 7" \
     ACPI_REGULAR_TIME="01:00" \
-      sh ./testwakeup `wakeuptime '2008-05-12 20:00:00'`
+      bash ./testwakeup `wakeuptime '2008-05-12 20:00:00'`
     expect_wakeup_time "2008-01-02 00:55:00"
 end_test
 
@@ -67,7 +63,7 @@
     FAKEDATETIME="2008-05-11 01:00:00" \
     ACPI_REGULAR_DAYS="1 4" \
     ACPI_REGULAR_TIME="02:00" \
-      sh ./testwakeup `wakeuptime '@0'`
+      bash ./testwakeup `wakeuptime '@0'`
     expect_wakeup_time "2008-05-12 01:55:00"
 end_test
 
@@ -76,7 +72,7 @@
     FAKEDATETIME="2008-05-11 01:00:00" \
     ACPI_REGULAR_DAYS="1 4" \
     ACPI_REGULAR_TIME="02:00" \
-      sh ./testwakeup `wakeuptime '@0'`
+      bash ./testwakeup `wakeuptime '@0'`
     expect_wakeup_time "2008-05-12 01:55:00"
 end_test
 
@@ -85,33 +81,20 @@
     FAKEDATETIME="2008-05-13 01:00:00" \
     ACPI_REGULAR_DAYS="1 4" \
     ACPI_REGULAR_TIME="02:00" \
-      sh ./testwakeup `wakeuptime '@0'`
+      bash ./testwakeup `wakeuptime '@0'`
     expect_wakeup_time "2008-05-15 01:55:00"
 end_test
 
 start_test "Should write seconds since 1970-01-01 to WAKEALARM"
     ACPI_ALARM=/does-not-exist \
     WAKEALARM=./alarm \
-      sh ./testwakeup `wakeuptime '2008-05-11 20:00:00'`
+      bash ./testwakeup `wakeuptime '2008-05-11 20:00:00'`
     assert_equals `date -d '2008-05-11 19:55:00' +%s` `cat ./alarm`
 end_test
 
-start_test "Should set the time as UTC when system uses UTC and WAKEALERM"
-    #
-    # Reveals bug reported here: 
-    #   http://www.vdr-portal.de/board/thread.php?threadid=77166
-    # 
-    ACPI_ALARM=/does-not-exist \
-    WAKEALARM=./alarm \
-    UTC=yes \
-      sh ./testwakeup `wakeuptime '2008-06-11 20:00:00'`
-    assert_equals `date -d '2008-06-11 17:55:00 UTC' +%s` `cat ./alarm`
-end_test
-
 start_test "Should write the wakeup time to the wakeup file"
-    UTC=yes \
-      sh ./testwakeup `wakeuptime '2008-05-11 20:00:00'`
-    expect_wakeup_file "2008-05-11 17:55:00"
+    bash ./testwakeup `wakeuptime '2008-05-11 20:00:00'`
+    expect_wakeup_file "2008-05-11 19:55:00"
 end_test
 
 exit $FAILURE
--- a/tests/testhelpers.sh
+++ b/tests/testhelpers.sh
@@ -17,6 +17,6 @@
 {
     local time
     time=`cat ./wakeup`
-    assert_equals "$1" "$time"
+    assert_equals "$(/bin/date -d "$1" +%s)" "$time"
     return $?
 }
