#!/bin/bash
#
# VDR shutdown hook for ACPI - Tobias Grimm <vdr@e-tobi.net>
# modified by Alexander Grothe <seahawk1986@gmx.de>
# --------------------------
#
# This shutdown hook sets the wakeup time for the next timer using
# ACPI.
#

if [ "$(basename "$0")" != "testwakeup" ] ; then
    # read arguments for acpi-wakeup from conf-file
    . /etc/vdr/vdr-addon-acpiwakeup.conf
    WAKEUP_FILE="/var/cache/vdr/acpiwakeup.time"

    LOG="logger -t vdr-addon-acpiwakeup "
else
    WAKEUP_FILE=$WAKEUP_FILE
    LOG="nop"
fi

nop()
{
    # No Operation
    echo -n ""
}

# Defaults:
[ -z "$ACPI_ENABLED" ]       && export ACPI_ENABLED="yes"
[ -z "$ACPI_REGULAR_DAYS" ]  && export ACPI_REGULAR_DAYS="0"
[ -z "$ACPI_REGULAR_TIME" ]  && export ACPI_REGULAR_TIME="00:00"
[ -z "$ACPI_START_AHEAD" ]   && export ACPI_START_AHEAD="5"
[ -z "$WAKEALARM" ]          && export WAKEALARM="/sys/class/rtc/rtc0/wakealarm"

TIMER=$1

AcpiError()
{
    $LOG "No writeable $WAKEALARM found. RTC needed!!!"
    echo "ABORT_MESSAGE=\"RTC not writable, shutdown aborted!\""
    exit 1
}


ResetWakeupTime_RTC()
{
    if [ -w $WAKEALARM ]; then
        $LOG "Writing 0 to $WAKEALARM"
        echo 0 > $WAKEALARM &&
        return 0
    else
        $LOG "WAKEALARM $WAKEALARM not writable"
    fi
    return 1
}

SetWakeupTime_RTC() {
    local -i ts="$1"

    if [ -w $WAKEALARM ] && ResetWakeupTime; then
            wakeup_offset="+$(( ts - $(date +%s) ))"
            $LOG "Writing $wakeup_offset (for $ts) to $WAKEALARM"
            # we use a relative time because of a bug with absolute
            # time and local vs. UTC timing, and avoid the handling of offsets
            echo "$wakeup_offset" > $WAKEALARM 2>/dev/null && return 0
    fi
    return 1
}

ResetWakeupTime()
{
    $LOG "Resetting ACPI alarm time"
    ResetWakeupTime_RTC || \
    AcpiError
}

SetWakeupTime()
{
    $LOG "Try setting ACPI alarm time to: $(date -d@"$1") ($1)"
    if SetWakeupTime_RTC "$1"
    then
        echo "$1" >"$WAKEUP_FILE"
    else
        # If the RTC did not accept the date, it might be to far in the future
        # see https://github.com/torvalds/linux/commit/6a6af3d04435adfdaab363624ec569a9b5d3973c
        # so we need to try waking up in less than a year, less than a month or less than a day
        dates=("now +1 year -1 min" "now +1 month -1 min" "now +1 week -1 min" "now +1 day -1 min")
        for d in "${dates[@]}"
        do
	    new_date=$(date -d "$d" +%s)
            [ "$1" -lt "$new_date" ] && continue
	    $LOG "RTC did not accept $1, try setting ACPI alarm time to: $(date -d@"$new_date") ($new_date)"
            if SetWakeupTime_RTC "$new_date"
            then
                # remember wakeup time for stop script
                echo "$new_date" >"$WAKEUP_FILE"
                return 0
            fi
        done
	AcpiError
    fi
}

IsRegularDayOfWeek()
{
    local day
    for day in $ACPI_REGULAR_DAYS
    do
        if [ "$day" = "$(date -d "@$1" +%u)" ]
        then
            return 0
        fi
    done
    return 1
}

if [ $ACPI_ENABLED = "yes" ]; then
    # check if we should wake up before the next timer:
    if [ "$ACPI_REGULAR_DAYS" != "0" ]; then
        REGULAR_TIMER=$(date -d "$ACPI_REGULAR_TIME" +%s)
        if [ "$REGULAR_TIMER" -lt "$(date +%s)" ] ; then
            REGULAR_TIMER=$(( REGULAR_TIMER + 24 * 60 * 60))
        fi
        while ! IsRegularDayOfWeek $REGULAR_TIMER ; do
            REGULAR_TIMER=$(( REGULAR_TIMER + 24 * 60 * 60))
        done

        if [ "$TIMER" -eq 0 ] || [ "$TIMER" -gt 0 -a "$REGULAR_TIMER" -lt "$TIMER" ] ; then
            TIMER=$REGULAR_TIMER
        fi
    fi
    if [ $TIMER -gt 0 ]; then
        MIN_START_AHEAD=$(($(date +%s) + (60 * ACPI_START_AHEAD) ))
        if [ $MIN_START_AHEAD -gt $TIMER ]; then
            $LOG "Can not set wakeup time less than $ACPI_START_AHEAD minutes ahead."
            echo "ABORT_MESSAGE=\"Wakeup in less than $ACPI_START_AHEAD minutes, aborting!\""
            exit 1
        fi

        # adjust wakeup time by ACPI_START_AHEAD
    TIMER=$(( TIMER - (60 * ACPI_START_AHEAD) ))
    fi

    if [ $TIMER -eq 0 ]; then
        ResetWakeupTime
    else
        SetWakeupTime "$TIMER"
    fi

else
    $LOG "ACPIWakeup functionality is disabled"
fi
