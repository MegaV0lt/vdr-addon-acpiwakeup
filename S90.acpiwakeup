#!/bin/bash
#
# VDR shutdown hook for ACPI - Tobias Grimm <vdr@e-tobi.net>
# modified by Alexander Grothe <seahawk1986@gmx.de>
# --------------------------
#
# This shutdown hook sets the wakeup time for the next timer using
# ACPI.
#

### Functions ###
LOG() {
    if [ -z "$TESTWAKEUP" ] ; then 
        logger -t '[vdr-addon-acpiwakeup]' "$*"
    else
        [ -t 1 ] && echo "[vdr-addon-acpiwakeup] $*"
    fi
}

AcpiError() {
    LOG "ERROR: No writeable $WAKEALARM found. RTC needed!"
    echo "ABORT_MESSAGE=\"RTC not writable, shutdown aborted!\""
    exit 1
}


ResetWakeupTime_RTC() {
    if [ -w "$WAKEALARM" ] ; then
        LOG "Writing 0 to $WAKEALARM"
        echo 0 > "$WAKEALARM" && return 0
    else
        LOG "ERROR: WAKEALARM $WAKEALARM not writable"
    fi
    return 1
}

SetWakeupTime_RTC() {
    local -i ts="$1"
    if [ -w "$WAKEALARM" ] && ResetWakeupTime ; then
            wakeup_offset="+$((ts - NOW))"
            LOG "Writing $wakeup_offset $NEXT_TIMER to $WAKEALARM"
            # We use a relative time because of a bug with absolute
            # time and local vs. UTC timing, and avoid the handling of offsets
            echo "$wakeup_offset" > "$WAKEALARM" 2>/dev/null && return 0
    fi
    return 1
}

ResetWakeupTime() {
    LOG 'Resetting ACPI alarm time'
    ResetWakeupTime_RTC || AcpiError
}

SetWakeupTime() {
    LOG "Try setting ACPI alarm time to: $(date -d@"$1") ($1)"
    if SetWakeupTime_RTC "$1" ; then
        echo "$1" > "$WAKEUP_FILE"
    else
        # If the RTC did not accept the date, it might be to far in the future.
        # See https://github.com/torvalds/linux/commit/6a6af3d04435adfdaab363624ec569a9b5d3973c
        # So we need to try waking up in less than a year, less than a month or less than a day
        dates=("now +1 year -1 min" "now +1 month -1 min" "now +1 week -1 min" "now +1 day -1 min")
        for d in "${dates[@]}" ; do
	        new_date=$(date -d "$d" +%s)
            [ "$1" -lt "$new_date" ] && continue
	        LOG "RTC did not accept $1, try setting ACPI alarm time to: $(date -d@"$new_date") ($new_date)"
            if SetWakeupTime_RTC "$new_date" ; then
                # Remember wakeup time for stop script
                echo "$new_date" >"$WAKEUP_FILE"
                return 0
            fi
        done
	    AcpiError
    fi
}

IsRegularDayOfWeek() {
    local day
    for day in $ACPI_REGULAR_DAYS ; do
        [ "$day" = "$(date -d "@$1" +%u)" ] && return 0
    done
    return 1
}

### Main ###
if [ "$(basename "$0")" != 'testwakeup' ] ; then
    # Read arguments for acpi-wakeup from conf-file
    . /etc/vdr/vdr-addon-acpiwakeup.conf
    WAKEUP_FILE='/var/cache/vdr/acpiwakeup.time'
else
    # This variable is assigned to itself, so the assignment does nothing.
    # WAKEUP_FILE=$WAKEUP_FILE
    TESTWAKEUP='true'
fi

# Defaults for variables:
[ -z "$ACPI_ENABLED" ]          && export ACPI_ENABLED='yes'
[ -z "$ACPI_MAX_MARGIN_HOURS" ] && export ACPI_MAX_MARGIN_HOURS=0
[ -z "$ACPI_REGULAR_DAYS" ]     && export ACPI_REGULAR_DAYS=0
[ -z "$ACPI_REGULAR_TIME" ]     && export ACPI_REGULAR_TIME='00:00'
[ -z "$ACPI_START_AHEAD" ]      && export ACPI_START_AHEAD=5
[ -z "$WAKEALARM" ]             && export WAKEALARM='/sys/class/rtc/rtc0/wakealarm'
NEXT_TIMER='(timer)'  # Type of the next timer

TIMER="$1"  # Next timer in seconds since 1970-01-01 00:00:00 UTC, or 0 if no timer
NOW=$(date +%s)  # Current time in seconds since 1970-01-01 00:00:00 UTC


if [ "$ACPI_ENABLED" = 'yes' ] ; then
    # Check if we should wake up before the next timer
    if [ "$ACPI_REGULAR_DAYS" != '0' ] ; then
        REGULAR_TIMER=$(date -d "$ACPI_REGULAR_TIME" +%s)
        if [ "$REGULAR_TIMER" -lt "$NOW" ] ; then
            REGULAR_TIMER=$((REGULAR_TIMER + (24 * 60 * 60)))
        fi
        while ! IsRegularDayOfWeek "$REGULAR_TIMER" ; do
            REGULAR_TIMER=$((REGULAR_TIMER + (24 * 60 * 60)))
        done

        # if [ "$TIMER" -eq 0 ] || [ "$TIMER" -gt 0 -a "$REGULAR_TIMER" -lt "$TIMER" ] ; then
        # This is equivalent to the original condition, but it eliminates the need for the -gt 0 check,
        # since the -lt check will only be true if $TIMER is greater than 0
        if [ "$TIMER" -eq 0 ] || [ "$REGULAR_TIMER" -lt "$TIMER" ] ; then
            TIMER="$REGULAR_TIMER"
            NEXT_TIMER='(regular day)'
        fi
    fi

    # Check if we should wake up within the maximum margin hours
    if [ "$ACPI_MAX_MARGIN_HOURS" -gt 0 ] ; then
        MAX_MARGIN_TIMER=$((NOW + (60 * 60 * ACPI_MAX_MARGIN_HOURS)))
        if [ "$TIMER" -eq 0 ] || [ "$MAX_MARGIN_TIMER" -lt "$TIMER" ] ; then
            TIMER="$MAX_MARGIN_TIMER"
            NEXT_TIMER='(margin)'
        fi
    fi

    if [ "$TIMER" -gt 0 ] ; then
        MIN_START_AHEAD=$((NOW + (60 * ACPI_START_AHEAD)))
        if [ "$MIN_START_AHEAD" -gt "$TIMER" ] ; then
            LOG "Can not set wakeup time less than $ACPI_START_AHEAD minutes ahead."
            echo "ABORT_MESSAGE=\"Wakeup in less than $ACPI_START_AHEAD minutes, aborting!\""
            exit 1
        fi

        # Adjust wakeup time by ACPI_START_AHEAD
        TIMER=$((TIMER - (60 * ACPI_START_AHEAD)))
    fi

    if [ "$TIMER" -eq 0 ] ; then
        ResetWakeupTime
    else
        SetWakeupTime "$TIMER"
    fi

else
    LOG 'ACPIWakeup functionality is disabled'
fi
